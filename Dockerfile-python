ARG ARCH=
# AlpineLinux with a glibc-2.29-r0 and python3
FROM ${ARCH}/alpine:3.12
ARG ARCH
ENV ARCH=${ARCH}

RUN set -ex && \
   echo $ARCH > /etc/ARCH

# This hack is widely applied to avoid python printing issues in docker containers.
# See: https://github.com/Docker-Hub-frolvlad/docker-alpine-python3/pull/13
ENV PYTHONUNBUFFERED=1
ENV LANG=C.UTF-8

#see below
#ARG GLIBC_REPO=https://github.com/$GLIBC_REPO_INFIX/alpine-pkg-glibc
ARG GLIBC_VERSION=2.32-r0



#updating from alpine 3.8 to 3.12 as of 23.05.2021
RUN set -ex && \
    #apk -U upgrade  && \
    apk add --no-cache musl=1.1.24-r10 busybox=1.31.1-r20 alpine-baselayout=3.2.0-r7 ca-certificates-bundle \
                       ssl_client=1.31.1-r20 musl-utils=1.1.24-r10

#dbus-launch, dbus-run-session
RUN set -ex && \
    apk add --no-cache dbus=1.12.18-r0 dbus-x11=1.12.18-r0 libx11=1.6.12-r1 libxcb=1.14-r1 libxdmcp=1.1.3-r0 \
                           libxcb=1.14-r1 libx11=1.6.12-r1

#libgnome-keyring
RUN set -ex && \
   apk add --no-cache libgnome-keyring=3.12.0-r2 dbus-libs=1.12.18-r0 gnome-keyring=3.36.0-r0 \
           linux-pam=1.3.1-r4 gcr-base=3.36.0-r0 p11-kit=0.23.22-r0 glib=2.64.6-r0 pcre=8.44-r0 \
           libmount=2.35.2-r0 libblkid=2.35.2-r0 libintl=0.20.2-r0 libcap-ng=0.7.10-r1

#Git
RUN set -ex && \
   apk add --no-cache git=2.26.3-r0 expat=2.2.9-r1 pcre2=10.35-r0 && \
   #git config --global credential.helper store
   #git config --global credential.helper cache
   #see https://git-scm.com/docs/git-credential-cache
   git config --global credential.helper 'cache --timeout=3600'



#ssl, curl
#for curl-dev see https://stackoverflow.com/a/51849028/1137529
#for libffi-dev see https://stackoverflow.com/a/58396708/1137529
#for cargo see https://github.com/pyca/cryptography/issues/5776#issuecomment-775158562
RUN set -ex && \
    apk add --no-cache openssl-dev=1.1.1k-r0 musl-dev=1.1.24-r10 cyrus-sasl-dev=2.1.27-r6 \
                       linux-headers=5.4.5-r1 unixodbc-dev=2.3.7-r2 curl-dev=7.77.0-r0 libffi-dev==3.3-r2 cargo==1.44.0-r0

#https://stackoverflow.com/questions/5178416/libxml-install-error-using-pip
RUN set -ex && \
    apk add --no-cache libxml2-dev=2.9.10-r5 libxslt-dev=1.1.34-r0

#gcc, gfortran, lapack (requires ssl layer above)
#see https://stackoverflow.com/questions/11912878/gcc-error-gcc-error-trying-to-exec-cc1-execvp-no-such-file-or-directory
#see https://stackoverflow.com/a/38571314/1137529
RUN set -ex && \
    apk add --no-cache make=4.3-r0 gcc=9.3.0-r2 build-base=0.5-r2 lapack-dev=3.9.0-r2 freetype-dev=2.10.4-r0 \
                       gfortran=9.3.0-r2

#https://github.com/h5py/h5py/issues/1461#issuecomment-562871041
#https://stackoverflow.com/questions/66705108/how-to-install-hdf5-on-docker-image-with-linux-alpine-3-13
RUN set -ex && \
    apk add --no-cache hdf5-dev=1.10.6-r1


#bash+usefull utils
#curl is installed above
RUN set -ex && \
    apk --no-cache add bash=5.0.17-r0 nano=4.9.3-r0 mlocate=0.26-r7 && \
    updatedb && \
    #disable coloring for nano, see https://stackoverflow.com/a/55597765/1137529
    echo "syntax \"disabled\" \".\"" > ~/.nanorc; echo "color green \"^$\"" >> ~/.nanorc

#install glibc (another c++ compiler, older one)
# do all in one step
RUN set -ex && \
    #Remarked by Alex \
    #apk -U upgrade && \
    #Alex added --no-cache
    apk --no-cache add libstdc++=9.3.0-r2 curl=7.77.0-r0 && \
    #Added  by Alex \
    #Alex added --no-cache
    apk --no-cache add net-tools=1.60_git20140218-r2 && \
    wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub && \
    #Added by Alex \
    if [ "$ARCH" = "arm64v8" ]; then suffix='-arm64'; else suffix=''; fi && \
    #Added by Alex \
    if [ "$ARCH" = "arm64v8" ]; then infix='ljfranklin'; else infix='sgerrand'; fi && \
    GLIBC_REPO=https://github.com/$infix/alpine-pkg-glibc && \
    for pkg in glibc-${GLIBC_VERSION} glibc-bin-${GLIBC_VERSION} glibc-i18n-${GLIBC_VERSION}; do curl -sSL ${GLIBC_REPO}/releases/download/${GLIBC_VERSION}${suffix}/${pkg}.apk -o /tmp/${pkg}.apk; done  && \
    #Alex added --no-cache
    apk --no-cache --allow-untrusted add /tmp/*.apk && \
    rm -v /tmp/*.apk && \
    ( /usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 C.UTF-8 || true ) && \
    echo "export LANG=C.UTF-8" > /etc/profile.d/locale.sh && \
    /usr/glibc-compat/sbin/ldconfig /lib /usr/glibc-compat/lib


#https://stackoverflow.com/questions/9510474/removing-pips-cache
#https://pip.pypa.io/en/stable/reference/pip_install/#caching
#pip config set global.cache-dir false doesn't work
#https://stackoverflow.com/questions/9510474/removing-pips-cache/61762308#61762308
RUN mkdir -p /root/.config/pip
RUN echo "[global]" > /root/.config/pip/pip.conf; echo "no-cache-dir = false" >> /root/.config/pip/pip.conf; echo >> /root/.config/pip/pip.conf;

#python3-dev (we need C++ header for cffi)
RUN set -ex && \
   apk add --no-cache make==4.3-r0 python3-dev==3.8.10-r0

#https://stackoverflow.com/a/62555259/1137529
RUN set -ex && \
    ln -s /usr/bin/python3.8 /usr/bin/python && \
    ln -s /usr/bin/python3.8-config /usr/bin/python-config && \
    python -m ensurepip && \
    cp /usr/bin/pip3.8 /usr/bin/pip


RUN set -ex && \
   pip install --upgrade pip==20.3.1 setuptools==51.0.0 wheel==0.36.1

RUN set -ex && \
    pip install ruamel_yaml==0.15.100

RUN set -ex && \
        #entrypoints==0.2.3 used in setup.py
        #This version of PyYAML==5.1 works with awscli
        #pyyaml installation from pypi
        pip install entrypoints==0.2.3 pyyaml==5.1


#slim
RUN set -ex && \
        #twine
        #https://twine.readthedocs.io/en/latest/changelog.html see 3.0.0 changelog
        #Add Python 3.8 support
        #see https://github.com/pypa/twine/pull/518
        pip install twine==3.2.0 pkginfo==1.6.1 colorama==0.4.3 rfc3986==1.4.0 readme-renderer==28.0  \
                                            webencodings==0.5.1 bleach==3.2.1 requests-toolbelt==0.9.1 \
                                                                                        packaging==20.4 pyparsing==2.4.7 \
                                                                                                                        cffi==1.14.5 cryptography==3.4.7 && \

        #pin pyOpenSSL==20.0.1 requests==2.24.0 tqdm==4.59.0
        pip install cffi==1.14.5 cryptography==3.4.7 idna==2.10 pycparser==2.20  pyOpenSSL==20.0.1 \
                    requests==2.24.0 chardet==3.0.4 tqdm==4.59.0  urllib3==1.25.11 toml==0.10.2

#extras
RUN set -ex && \
         #boto3
         pip install awscli==1.18.184 boto3==1.16.24 botocore==1.19.24 colorama==0.4.3 && \
         pip install python-dotenv==0.15.0 && \
         pip install bidict==0.21.2 && \

         #fabric & pyOpenSSL
         pip install fabric==2.5.0 invoke==1.4.1 paramiko==2.7.2 PyNaCl==1.3.0  bcrypt==3.2.0 \
                     cffi==1.14.5 cryptography==3.4.7 pycparser==2.20 PyNaCl==1.3.0 six==1.15.0 \
                                 pyOpenSSL==20.0.1 && \

         #pytest extra
         pip install pytest==6.1.2 mock==4.0.2 pytest-assume==2.3.3 pytest-mock==3.3.1 \
                     attrs==20.2.0 py==1.9.0 PyYAML==5.1 toml==0.10.2 pluggy==0.13.1 packaging==20.4 iniconfig==1.1.1 \
                     pyparsing==2.4.7 requests==2.24.0 tqdm==4.59.0 && \

         #twine
     #https://twine.readthedocs.io/en/latest/changelog.html see 3.0.0 changelog
     #Add Python 3.8 support
     #see https://github.com/pypa/twine/pull/518
     pip install twine==3.2.0 pkginfo==1.6.1 colorama==0.4.3 rfc3986==1.4.0 readme-renderer==28.0  \
                                                                          requests-toolbelt==0.9.1  && \
     #SQLAlchemy & Hive & Postgress
         pip install SQLAlchemy==1.4.11 thrift==0.13.0 thrift-sasl==0.4.2 sasl==0.2.1 PyHive==0.6.2 pg8000==1.19.3 \
                     pure-sasl==0.6.2 pure-transport==0.2.0 future==0.18.2



#nltk-data
#RUN set -ex && python -m nltk.downloader -d /usr/share/nltk_data all





RUN set -ex && pip freeze > /etc/installed.txt




#Cleanup
RUN set -ex && rm -rf /var/cache/apk/* /tmp/* /var/tmp/*
#RUN apk del glibc-i18n make gcc musl-dev build-base gfortran
RUN rm -rf /var/cache/apk/*

COPY enter_keyring.sh /etc/enter_keyring.sh
COPY reuse_keyring.sh /etc/reuse_keyring.sh
COPY unlock_keyring.sh /etc/unlock_keyring.sh
COPY rest_keyring.sh /etc/rest_keyring.sh


WORKDIR /
#CMD ["/bin/sh"]
CMD tail -f /dev/null


##docker system prune --all
#docker rmi -f alpine-python3-amd64 alpine-python3-arm64v8
#docker rm -f py3-amd64 py3-amd64-arm64v8
#docker build . -t alpine-python3-amd64 --build-arg ARCH=amd64 --file Dockerfile-python
#docker build . -t alpine-python3-arm64v8 --build-arg ARCH=arm64v8 --file Dockerfile-python
#docker run --name py3-amd64 -d alpine-python3-amd64
#docker run --name py3-arm64v8 -d alpine-python3-arm64v8
#smoke test
#docker exec -it $(docker ps -q -n=1) pip config list
#docker exec -it $(docker ps -q -n=1) bash
##docker build --squash . -t alpine-python3-amd64 --build-arg ARCH=amd64
##docker build --squash . -t alpine-python3-arm64v8 --build-arg ARCH=arm64v8


#see https://github.com/fabioz/PyDev.Debugger
#docker run --env-file .env.docker --name py3 -p 54717:54717/tcp -v //C/dev/work/:/opt/project -v //C/Program\ Files/JetBrains/PyCharm\ 2020.1.4/plugins/python/helpers:/opt/.pycharm_helpers -d alpine-python3
##docker exec -it $(docker ps -q -n=1) dbus-run-session bash
#python /opt/.pycharm_helpers/pydev/pydevconsole.py --mode=server --port=54717 #run
#python -u /opt/.pycharm_helpers/pydev/pydevd.py --cmd-line --multiprocess --qt-support=auto --port 54717 --file /opt/project/alpine-python3/keyring_check.py #debug
#runfile('/opt/project/alpine-anaconda3/keyring_check.py', wdir='/opt/project/alpine-anaconda3')

#docker run --name py3-amd64-e -d alpine-anaconda3-slim-amd64-e bash
#populate from docker inspect -f "{{ .Config.Cmd }}" alpine-python3-amd64
#based on https://docs.docker.com/engine/reference/commandline/commit/
#docker commit --change "CMD /bin/sh" --change "ENV PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin: \
#    ARCH=amd64 \
#    PYTHONUNBUFFERED=1 \
#    LANG=C.UTF-8" \
#    $(docker ps -q -n=1) alpine-anaconda3-slim-amd64-ef

#docker run --name py3-arm64v8-e -d alpine-anaconda3-slim-arm64v8-e bash
#populate from docker inspect -f "{{ .Config.Cmd }}" alpine-python3-arm64v8
#based on https://docs.docker.com/engine/reference/commandline/commit/
#docker commit --change "CMD /bin/sh" --change "ENV PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin: \
#    ARCH=amd64 \
#    PYTHONUNBUFFERED=1 \
#    LANG=C.UTF-8" \
#    $(docker ps -q -n=1)  alpine-anaconda3-slim-arm64v8-ef


#docker tag alpine-python3-arm64v8-ef alexberkovich/alpine-python3:0.3.2-arm64v8
#docker tag alpine-python3-amd64-ef alexberkovich/alpine-python3:0.3.2-amd64
#docker push alexberkovich/alpine-python3:0.3.2-arm64v8
#docker push alexberkovich/alpine-python3:0.3.2-amd64
#docker manifest create alexberkovich/alpine-python3:0.3.2 --amend alexberkovich/alpine-python3:0.3.2-arm64v8 --amend alexberkovich/alpine-python3:0.3.2-amd64
#docker manifest annotate --arch arm64 --variant v8 alexberkovich/alpine-python3:0.3.2 alexberkovich/alpine-python3:0.3.2-arm64v8
#docker manifest annotate --arch amd64 alexberkovich/alpine-python3:0.3.2 alexberkovich/alpine-python3:0.3.2-amd64
#docker manifest push --purge alexberkovich/alpine-python3:0.3.2

#docker manifest create alexberkovich/alpine-python3:latest --amend alexberkovich/alpine-python3:0.3.2-arm64v8 --amend alexberkovich/alpine-python3:0.3.2-amd64
#docker manifest annotate --arch arm64 --variant v8 alexberkovich/alpine-python3:latest alexberkovich/alpine-python3:0.3.2-arm64v8
#docker manifest annotate --arch amd64 alexberkovich/alpine-python3:latest alexberkovich/alpine-python3:0.3.2-amd64
#docker manifest push --purge alexberkovich/alpine-python3:latest
# EOF
